Cuando empiezas a trabajar en un entorno local, el proyecto vive únicamente en tu computadora. Esto significa que no hay forma de que otros miembros del equipo trabajen en él.

Para solucionar esto, utilizamos los servidores remotos: un nuevo estado que deben seguir nuestros archivos para conectarse y trabajar con equipos de cualquier parte del mundo.

Estos servidores remotos pueden estar alojados en GitHub, GitLab, BitBucket, entre otros. Lo que van a hacer es guardar el mismo repositorio que tienes en tu computadora y darnos una URL con la que todos podremos acceder a los archivos del proyecto. Así, el equipo podrá descargarlos, hacer cambios y volverlos a enviar al servidor remoto para que otras personas vean los cambios, comparen sus versiones y creen nuevas propuestas para el proyecto.

Esto significa que debes aprender algunos nuevos comandos
Comandos para trabajo remoto con GIT

    git clone url_del_servidor_remoto: Nos permite descargar los archivos de la última versión de la rama principal y todo el historial de cambios en la carpeta .git.
    git push: Luego de hacer git add y git commit debemos ejecutar este comando para mandar los cambios al servidor remoto.
    git fetch: Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local (en caso de que hayan, por supuesto).
    git merge: También usamos el comando git merge con servidores remotos. Lo necesitamos para combinar los últimos cambios del servidor remoto y nuestro directorio de trabajo.
    git pull: Básicamente, git fetch y git merge al mismo tiempo.

Adicionalmente, tenemos otros comandos que nos sirven para trabajar en proyectos muy grandes:

    git log --oneline:Te muestra el id commit y el título del commit.
    git log --decorate: Te muestra donde se encuentra el head point en el log.
    git log --stat: Explica el número de líneas que se cambiaron brevemente.
    git log -p: Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
    git shortlog: Indica que commits ha realizado un usuario, mostrando el usuario y el título de sus commits.
    git log --graph --oneline --decorate y
    git log --pretty=format:"%cn hizo un commit %h el dia %cd": Muestra mensajes personalizados de los commits.
    git log -3: Limitamos el número de commits.
    git log --after=“2018-1-2”
    git log --after=“today” y
    git log --after=“2018-1-2” --before=“today”: Commits para localizar por fechas.
    git log --author=“Name Author”: Commits hechos por autor que cumplan exactamente con el nombre.
    git log --grep=“INVIE”: Busca los commits que cumplan tal cual está escrito entre las comillas.
    git log --grep=“INVIE” –i: Busca los commits que cumplan sin importar mayúsculas o minúsculas.
    git log – index.html: Busca los commits en un archivo en específico.
    git log -S “Por contenido”: Buscar los commits con el contenido dentro del archivo.
    git log > log.txt: guardar los logs en un archivo txt

Aporte creado por: HellenBar

Las ramas son la forma de hacer cambios en nuestro proyecto sin afectar el flujo de trabajo de la rama principal. Esto porque queremos trabajar una parte muy específica de la aplicación o simplemente experimentar.

La cabecera o HEAD representan la rama y el commit de esa rama donde estamos trabajando. Por defecto, esta cabecera aparecerá en el último commit de nuestra rama principal. Pero podemos cambiarlo al crear una rama (git branch rama, git checkout -b rama) o movernos en el tiempo a cualquier otro commit de cualquier otra rama con los comandos (git reset id-commit, git checkout rama-o-id-commit).
Cómo funcionan las ramas en GIT

Las ramas son la manera de hacer cambios en nuestro proyecto sin afectar el flujo de trabajo de la rama principal. Esto porque queremos trabajar una parte muy específica de la aplicación o simplemente experimentar.

    git branch -nombre de la rama-: Con este comando se genera una nueva rama.

    git checkout -nombre de la rama-: Con este comando puedes saltar de una rama a otra.

    git checkout -b rama: Genera una rama y nos mueve a ella automáticamente, Es decir, es la combinación de git brach y git checkout al mismo tiempo.

    git reset id-commit: Nos lleva a cualquier commit no importa la rama, ya que identificamos el id del tag., eliminando el historial de los commit posteriores al tag seleccionado.

    git checkout rama-o-id-commit: Nos lleva a cualquier commit sin borrar los commit posteriores al tag seleccionado.

Aporte creado por: Carlos Eduardo Diaz


El comando git merge nos permite crear un nuevo commit con la combinación de dos ramas (la rama donde nos encontramos cuando ejecutamos el comando y la rama que indiquemos después del comando).
Cómo usar Git merge

En este ejemplo, vamos a crear un nuevo commit en la rama master combinando los cambios de una rama llamada cabecera:

git checkout master
git merge cabecera

Otra opción es crear un nuevo commit en la rama cabecera combinando los cambios de cualquier otra rama:

git checkout cabecera
git merge cualquier-otra-rama

Asombroso, ¿verdad? Es como si Git tuviera superpoderes para saber qué cambios queremos conservar de una rama y qué otros de la otra. El problema es que no siempre puede adivinar, sobre todo en algunos casos donde dos ramas tienen actualizaciones diferentes en ciertas líneas en los archivos. Esto lo conocemos como un conflicto.

Recuerda que al ejecutar el comando git checkout para cambiar de rama o commit puedes perder el trabajo que no hayas guardado. Guarda siempre tus cambios antes de hacer git checkout.
Comandos básicos de GitHub

    git init: crear un repositorio.
    git add: agregar un archivo a staging.
    git commit -m “mensaje”: guardar el archivo en git con un mensaje.
    git branch: crear una nueva rama.
    git checkout: moverse entre ramas.
    git push: mandar cambios a un servidor remoto.
    git fetch: traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local.
    git merge: tiene dos usos. Uno es la fusión de ramas, funcionando como un commit en la rama actual, trayendo la rama indicada. Su otro uso es guardar los cambios de un servidor remoto en nuestro directorio.
    git pull: fetch y merge al mismo tiempo.

Comandos para corrección en GitHub

    git checkout “codigo de version” “nombre del archivo”: volver a la última versión de la que se ha hecho commit.
    git reset: vuelve al pasado sin posibilidad de volver al futuro, se debe usar con especificaciones.
    git reset --soft: vuelve a la versión en el repositorio, pero guarda los cambios en staging. Así, podemos aplicar actualizaciones a un nuevo commit.
    git reset --hard: todo vuelve a su versión anterior
    git reset HEAD: saca los cambios de staging, pero no los borra. Es lo opuesto a git add.
    git rm: elimina los archivos, pero no su historial. Si queremos recuperar algo, solo hay que regresar. se utiliza así:
    git rm --cached elimina los archivos en staging pero los mantiene en el disco duro.
    git rm --force elimina los archivos de git y del disco duro.

Comandos para revisión y comparación en GitHub

    git status: estado de archivos en el repositorio.
    git log: historia entera del archivo.
    git log --stat: cambios específicos en el archivo a partir de un commit.
    git show: cambios históricos y específicos hechos en un archivo.
    git diff “codigo de version 1” “codigo de version 2”: comparar cambios entre versiones.
    git diff: comparar directorio con staging.

Aporte creado por: Pedro Alejandro Silva.

Git nunca borra nada, a menos que nosotros se lo indiquemos. Cuando usamos los comandos git merge o git checkout estamos cambiando de rama o creando un nuevo commit, no borrando ramas ni commits (recuerda que puedes borrar commits con git reset y ramas con git branch -d).

Git es muy inteligente y puede resolver algunos conflictos automáticamente: cambios, nuevas líneas, entre otros. Pero algunas veces no sabe cómo resolver estas diferencias, por ejemplo, cuando dos ramas diferentes hacen cambios distintos a una misma línea.

Esto lo conocemos como conflicto y lo podemos resolver manualmente. Solo debemos hacer el merge, ir a nuestro editor de código y elegir si queremos quedarnos con alguna de estas dos versiones o algo diferente. Algunos editores de código como Visual Studio Code nos ayudan a resolver estos conflictos sin necesidad de borrar o escribir líneas de texto, basta con hacer clic en un botón y guardar el archivo.

Recuerda que siempre debemos crear un nuevo commit para aplicar los cambios del merge. Si Git puede resolver el conflicto, hará commit automáticamente. Pero, en caso de no pueda resolverlo, debemos solucionarlo y hacer el commit.

Los archivos con conflictos por el comando git merge entran en un nuevo estado que conocemos como Unmerged. Funcionan muy parecido a los archivos en estado Unstaged, algo así como un estado intermedio entre Untracked y Unstaged. Solo debemos ejecutar git add para pasarlos al área de staging y git commit para aplicar los cambios en el repositorio.
Cómo revertir un merge

Si nos hemos equivocado y queremos cancelar el merge, debemos usar el siguiente comando:

git merge --abort

Conflictos en repositorios remotos

Al trabajar con otras personas, es necesario utilizar un repositorio remoto.
­
-Para copiar el repositorio remoto al directorio de trabajo local, se utiliza el comando git clone <url>, y para enviar cambios al repositorio remoto se utiliza git push.
-Para actualizar el repositorio local se hace uso del comando git fetch, luego se debe fusionar los datos traídos con los locales usando git merge.

    Para traer los datos y fusionarlos a la vez, en un solo comando, se usa git pull.
    ­- Para crear commits rápidamente, fusionando git add y git commit -m "", usamos git commit -am "".
    ­- Para generar nuevas ramas, hay que posicionarse sobre la rama que se desea copiar y utilizar el comando git branch <nombre>.
    Para saltar entre ramas, se usa el comando git checkout <branch>
    ­- Una vez realizado los cambios en la rama, estas deben fusionarse con git merge.
    El merge ocurre en la rama en la que se está posicionado. Por lo tanto, la rama a fusionar se transforma en la principal.
    Los merges también son commits.
    Los merges pueden generar conflictos, esto aborta la acción y pide que soluciones el problema manualmente, aceptando o rechazando los cambios que vienen.

Aporte creado por: José Tuzinkievicz, Lottie

Paso a paso para subir tu proyecto a github o a un servidor Git

# agregar nuestro repositorio local al del servidor de github 
git remote add origin (url)

#Verificar que la URL se haya guardado
git remote
git remote -v

#Traemos la versión del repositorio remoto y hacemos merge para crear un commit con los archivos de ambas partes. se puede usar git fetch y git merge o solo lo siguiente:
get pull origin main --allow-unrelated-histories
get pull origin main

#Guerdamos los cambios de nuestro repositorio logal en github
git push origin master


Crear una rama:
git branch branchName

Movernos a otra rama:
git checkout branchName

Crear una rama en el repositorio local:
git branch nombre-de-la-rama o git checkout -b nombre-de-la-rama

Publicar una rama local al repositorio remoto:
git push origin nombre-de-la-rama

Si, como colaborador, agregaste erróneamente el mensaje del commit, lo puedes cambiar de la siguiente manera:

Hacer un commit con el nuevo mensaje que queremos, esto nos abre el editor de texto de la terminal:
git commit —amend

Corregimos el mensaje

Traer el repositorio remoto
git pull origin master

Ejecutar el cambio
git push --set-upstream origin master

Git guarda todos los cambios aunque decidas borrarlos, al borrar un cambio lo que estás haciendo sólo es actualizar la punta del branch, para gestionar éstas puntas existe un mecanismo llamado registros de referencia o reflogs…La gestión de estos cambios es mediante los hash’es de referencia (o ref) que son apuntadores a los commits…Los recoges registran cuándo se actualizaron las referencias de Git en el repositorio local (sólo en el local), por lo que si deseas ver cómo has modificado la historia puedes utilizar el comando:

git reflog

Muchos comandos de Git aceptan un parámetro para especificar una referencia o “ref”, que es un puntero a una confirmación sobre todo los comandos:

    git checkout Puedes moverte sin realizar ningún cambio al commit exacto de la ref

    git checkout eff544f

    git reset: Hará que el último commit sea el pasado por la ref, usar este comando sólo si sabes exactamente qué estás haciendo

    git reset --hard eff544f # Perderá todo lo que se encuentra en staging y en el Working directory y se moverá el head al commit eff544f
    git reset --soft eff544f # Te recuperará todos los cambios que tengas diferentes al commit eff544f, los agregará al staging area y moverá el head al commit eff544f

    git merge: Puedes hacer merge de un commit en específico, funciona igual que con una branch, pero te hace el merge del estado específico del commit mandado

    git checkout master
    git merge eff544f # Fusionará en un nuevo commit la historia de master con el momento específico en el que vive

¿Qué pasa cuando todo se rompe y no sabemos qué está pasando? Con git reset HashDelHEAD nos devolveremos al estado en que el proyecto funcionaba.

    git reset --soft HashDelHEAD te mantiene lo que tengas en staging ahí.
    git reset --hard HashDelHEAD resetea absolutamente todo incluyendo lo que tengas en staging.

Atención

git reset es una mala práctica, no deberías usarlo en ningún momento. Debe ser nuestro último recurso.